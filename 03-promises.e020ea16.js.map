{"mappings":"YAAA,SAASA,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,MAGRC,EAAO,K,GAGRN,E,IAUSQ,SAASC,cAAc,SAG/BC,iBAAiB,UAEzB,SAAkBC,GAChBA,EAAGC,iBASH,IAPA,IAAMC,EAAQC,OAAOH,EAAGI,OAAOf,MAAMgB,OAC/BC,EAAOH,OAAOH,EAAGI,OAAOE,KAAKD,OAC7BE,EAASJ,OAAOH,EAAGI,OAAOG,OAAOF,OAGnCG,EAAW,EAENC,EAAI,EAAGA,GAAKF,EAAQE,IACfA,EACZD,EAAWN,EACXM,GAAYF,EACZI,QAAQC,IAAIH,GACZrB,EAAcyB,EAAUV,GACrBW,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBqB,QAAQC,IAAI,uBAAwCI,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,O,IAE3D2B,OAAM,SAAAF,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBqB,QAAQC,IAAI,sBAAqCI,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,O,IAY7DW,EAAGiB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve('ok');\n        // Fulfill\n      } else {\n        reject('no');\n        // Reject\n      }\n    }, delay);\n  });\n\n  // if (shouldResolve) {\n  //   console.log(`✅ Fulfilled promise ${position} in ${delay} ms`); // Fulfill\n  // } else {\n  //   console.log(`❌ Rejected promise ${position} in ${delay} ms`); // Reject\n  // }\n}\n\nconst formRef = document.querySelector('.form');\nconst promises = [];\n\nformRef.addEventListener('submit', onSubmit);\n\nfunction onSubmit(ev) {\n  ev.preventDefault();\n\n  const delay = Number(ev.target.delay.value);\n  const step = Number(ev.target.step.value);\n  const amount = Number(ev.target.amount.value);\n\n  let position = 0;\n  let addDelay = 0;\n\n  for (let i = 1; i <= amount; i++) {\n    position += i;\n    addDelay = delay;\n    addDelay += step;\n    console.log(addDelay);\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n      });\n\n    // setTimeout(() => {\n    //   createPromise(position, delay);\n    //   // const timerId = setInterval(() => {\n    //   //   if (timerId === amount) {\n    //   //     clearInterval(timerId);\n    //   //   }\n    //   // }, addDelay);\n    // }, delay);\n  }\n  ev.currentTarget.reset();\n}\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","ev","preventDefault","delay1","Number","target","value","step","amount","addDelay","i","console","log","position1","then","param","concat","catch","currentTarget","reset"],"version":3,"file":"03-promises.e020ea16.js.map"}