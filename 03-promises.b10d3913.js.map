{"mappings":"AAAA,SAASA,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,MAGRC,EAAO,KAAK,GAGbN,EAAM,G,CAUGQ,SAASC,cAAc,SAG/BC,iBAAiB,UAEzB,SAAkBC,GAChBA,EAAGC,iBAEH,MAAMC,EAAQC,OAAOH,EAAGI,OAAOf,MAAMgB,OAC/BC,EAAOH,OAAOH,EAAGI,OAAOE,KAAKD,OAC7BE,EAASJ,OAAOH,EAAGI,OAAOG,OAAOF,OAEvC,IAAIG,EAAW,EACXC,EAAW,EAEf,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,IAC3BF,GAAYE,EACZD,EAAWP,EACXO,GAAYH,EACZK,QAAQC,IAAIH,GACZtB,EAAcqB,EAAUN,GACrBW,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjBsB,QAAQC,IAAI,uBAAqBxB,QAAiBC,OAAW,IAE9DyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBsB,QAAQC,IAAI,sBAAoBxB,QAAeC,OAAW,IAYhEW,EAAGe,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve('ok');\n        // Fulfill\n      } else {\n        reject('no');\n        // Reject\n      }\n    }, delay);\n  });\n\n  // if (shouldResolve) {\n  //   console.log(`✅ Fulfilled promise ${position} in ${delay} ms`); // Fulfill\n  // } else {\n  //   console.log(`❌ Rejected promise ${position} in ${delay} ms`); // Reject\n  // }\n}\n\nconst formRef = document.querySelector('.form');\nconst promises = [];\n\nformRef.addEventListener('submit', onSubmit);\n\nfunction onSubmit(ev) {\n  ev.preventDefault();\n\n  const delay = Number(ev.target.delay.value);\n  const step = Number(ev.target.step.value);\n  const amount = Number(ev.target.amount.value);\n\n  let position = 0;\n  let addDelay = 0;\n\n  for (let i = 1; i <= amount; i++) {\n    position += i;\n    addDelay = delay;\n    addDelay += step;\n    console.log(addDelay);\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n      });\n\n    // setTimeout(() => {\n    //   createPromise(position, delay);\n    //   // const timerId = setInterval(() => {\n    //   //   if (timerId === amount) {\n    //   //     clearInterval(timerId);\n    //   //   }\n    //   // }, addDelay);\n    // }, delay);\n  }\n  ev.currentTarget.reset();\n}\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","ev","preventDefault","delay1","Number","target","value","step","amount","position1","addDelay","i","console","log","then","catch","currentTarget","reset"],"version":3,"file":"03-promises.b10d3913.js.map"}